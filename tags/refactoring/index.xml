<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>refactoring on tempkdw blog</title>
    <link>https://tempkdw.github.io/tags/refactoring/</link>
    <description>Recent content in refactoring on tempkdw blog</description>
    <image>
      <title>tempkdw blog</title>
      <url>https://tempkdw.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tempkdw.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 18 Dec 2023 14:43:45 +0900</lastBuildDate>
    <atom:link href="https://tempkdw.github.io/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mixin class 사용시 app 간 계층 구조</title>
      <link>https://tempkdw.github.io/posts/mixin_class/</link>
      <pubDate>Mon, 18 Dec 2023 14:43:45 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/mixin_class/</guid>
      <description>앞서 포스팅한 circular import 에 대한 생각 에서 해당 문제가 발생한 경우, 계층 구조를 먼저 생각해보자는 이야기를 했었다.
이번에는 이어서 class 의 공통된 기능을 뽑아낼 때 계층 구조를 잘 잡기 위한 방법을 생각해보았다.
일반적으로 Mixin class 는 하위 클래스들의 공통을 묶어 상위 abstract 로 뽑는데 사용되나, 가끔은 상위 클래스들에 공통된 기능을 붙이는 용도로도 사용된다.
django 로 가정하고 예시를 든다.
# A app class A(models.Model): nickname = models.CharField(...) def validate_nickname(self): ... # B app class B(models.</description>
    </item>
  </channel>
</rss>
